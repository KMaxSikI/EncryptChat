import SQL_DB
import asyncio
import logging
import sys
import buttons as bt
import state as st
import text as txt
import encrypt as en
import decrypt as de
import time
import re
import random

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from aiogram import F
from datetime import timedelta
from aiogram.client.default import DefaultBotProperties

BOT_TOKEN = '5518716450:AAH-2v-qOrseYSvOnMlYD4714GWongaXSkM'
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
PAYMENTS_TOKEN = "381764678:TEST:69793"

price = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π", amount=1000 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)

# @KikerEhoBot, https://t.me/KikerEhoBot - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç

SQL_DB = SQL_DB.Data_Base()
RESTR = r"[\w\D'._+-]+#[\d]+"


def days_to_seconds(days):
    return days * 24 * 60 * 60  # –ü–µ—Ä–µ–≤–æ–¥ –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥—ã


def time_sub_day(get_time):
    time_now = int(time.time())
    middle_time = int(get_time) - time_now

    if middle_time <= 0:
        return False
    else:
        dt = str(timedelta(seconds=middle_time))
        dt = dt.replace("days", "–¥–Ω–µ–π")
        dt = dt.replace("day", "–¥–µ–Ω—å")
        return dt


@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    if SQL_DB.get_id_status(message.from_user.id):
        await message.answer(f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {hbold(message.from_user.full_name)} !', reply_markup=bt.keyboard)
    else:
        await message.reply(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {hbold(message.from_user.full_name)} !\n'
                            f'\n'
                            f'{txt.greeting_message}', reply_markup=bt.keyboard)
        await SQL_DB.add_users(message.from_user.id, message.from_user.full_name, 0)


async def shifr_message(message: Message, state: FSMContext):
    if message.text is not None and re.match(RESTR, message.text):
        text_input = await en.message_input(message.text.split('#')[0], int(message.text.split('#')[1]))
        await message.answer(text_input)
        await SQL_DB.add_data_shifr(message.from_user.id, message.text.split('#')[0], int(message.text.split('#')[1]),
                                    text_input)
        await asyncio.sleep(random.randint(600, 600))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ("–°–æ–æ–±—â–µ–Ω–∏–µ"#4, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)')
        await asyncio.sleep(random.randint(20, 20))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


async def deshifr_message(message: Message, state: FSMContext):
    if message.text is not None and re.match(RESTR, message.text):
        text_output = await de.message_output(message.text.split('#')[0], int(message.text.split('#')[1]))
        await message.answer(text_output)
        await SQL_DB.add_data_deshifr(message.from_user.id, message.text.split('#')[0], int(message.text.split('#')[1]),
                                      text_output)
        await asyncio.sleep(random.randint(600, 600))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await state.clear()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ("–°–æ–æ–±—â–µ–Ω–∏–µ"#4, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)')
        await asyncio.sleep(random.randint(20, 20))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


@dp.message(F.text.lower() == 'üîê –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
async def encrypt(message: types.Message, state: FSMContext):
    await state.set_state(st.States.shifr)
    await message.answer(f'{txt.shifr_text}')
    await asyncio.sleep(random.randint(20, 20))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


@dp.message(F.text.lower() == 'üîì —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
async def decrypt(message: types.Message, state: FSMContext):
    await state.set_state(st.States.deshifr)
    await message.answer(f'{txt.deshifr_text}')
    await asyncio.sleep(random.randint(20, 20))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


@dp.message(F.text.lower() == 'üí¨ –æ–±—â–∏–π —á–∞—Ç')
async def feedback(message: types.Message, state: FSMContext):
    if SQL_DB.get_sub_status(message.from_user.id):
        await state.set_state(st.States.feedback)
        tg_encript_group = "https://t.me/encript_chat"
        await message.answer(f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏, —á—Ç–æ –±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É\n"
                             f" –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {tg_encript_group}")
        await asyncio.sleep(random.randint(20, 20))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await state.clear()
    else:
        await message.answer('–ß–∞—Ç —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.')
        await asyncio.sleep(random.randint(20, 20))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


@dp.message(F.text.lower() == 'üíª –∫–æ–¥–æ–≤–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞')
async def info_channal(message: types.Message, state: FSMContext):
    if SQL_DB.get_sub_status(message.from_user.id):
        await state.set_state(st.States.info_channal)
        tg_info_group = "https://t.me/Program_semanti"
        await message.answer(f"–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ —Å–∞–º–æ–µ –∫—Ä—É—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ —Å—Å—ã–ª–∫–µ {tg_info_group}")
        await asyncio.sleep(random.randint(20, 20))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await state.clear()
    else:
        await message.answer('–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.\n'
                             '–û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –æ—Å–≤–æ–∏—Ç—å –æ—Å–Ω–æ–≤—ã –∏ —Å–æ–≤–µ—Ç—É–µ—Ç, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏,\n'
                             '–æ–±—â–∞—è—Å—å —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤.\n'
                             '–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.')
        await asyncio.sleep(random.randint(20, 20))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


@dp.message(F.text.lower() == 'ü™™ –ø—Ä–æ—Ñ–∏–ª—å')
async def profile(message: types.Message):
    user_nik = "–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: " + await SQL_DB.get_nik(message.from_user.id)
    user_sub = time_sub_day(SQL_DB.get_time_sub(message.from_user.id))
    if not user_sub:
        user_sub = "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"

    user_sub = "\n–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –Ω–∞: " + user_sub
    await bot.send_message(message.from_user.id, user_nik + user_sub)
    await asyncio.sleep(random.randint(20, 20))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


@dp.message(F.text.lower() == 'üìÑ –æ–ø–∏—Å–∞–Ω–∏–µ')
async def description(message: types.Message, state: FSMContext):
    await state.set_state(st.States.description)
    await message.answer(f'{txt.description}')
    await asyncio.sleep(random.randint(180, 180))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
    await state.clear()


@dp.message(F.text.lower() == 'üí∞ –ø–æ–¥–ø–∏—Å–∫–∞')
async def buy_subscription(message: types.Message, state: FSMContext):
    await state.set_state(st.States.buy_subscription)
    if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           is_flexible=False,
                           prices=[price],
                           start_parameter="one-month-subscription",
                           payload="test-invoice-payload")
    await asyncio.sleep(random.randint(300, 300))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
    await state.clear()


@dp.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    if message.successful_payment.invoice_payload == "test-invoice-payload":
        time_sub = int(time.time()) + days_to_seconds(30)
        await SQL_DB.set_sub_time(message.from_user.id, time_sub)
        await bot.send_message(message.chat.id, '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞')
        await asyncio.sleep(random.randint(300, 300))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


dp.message.register(shifr_message, st.States.shifr)
dp.message.register(deshifr_message, st.States.deshifr)
dp.message.register(feedback, st.States.feedback)
dp.message.register(description, st.States.description)
dp.message.register(info_channal, st.States.info_channal)
dp.message.register(buy_subscription, st.States.buy_subscription)


@dp.message()
async def handle_messages(message: types.Message):
    await message.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n'
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.')
    await asyncio.sleep(random.randint(10, 10))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
