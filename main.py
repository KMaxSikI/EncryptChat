import SQL_DB
import asyncio
import logging
import sys
import buttons as bt
import state as st
import text as txt
import encrypt as en
import decrypt as de
import time
import re
import random

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from aiogram import F
from datetime import timedelta
from aiogram.client.default import DefaultBotProperties

BOT_TOKEN = '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞'
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))  # –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
dp = Dispatcher()  # –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥.
PAYMENTS_TOKEN = "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ–ø–ª–∞—Ç—ã"

price = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π", amount=1000 * 100)  # –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —Ü–µ–Ω—ã —Å –º–µ—Ç–∫–æ–π "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π" –∏ —Å—É–º–º–æ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö (1000 —Ä—É–±–ª–µ–π).

SQL_DB = SQL_DB.Data_Base()  # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Data_Base –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

RESTR = r"[\w\D'._+-]+#[\d]+"  # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∏–º—è#–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä".

ADMIN = ["454788681"]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.


def days_to_seconds(days):
    return days * 24 * 60 * 60  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥—ã.


def time_sub_day(get_time):
    time_now = int(time.time())  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    middle_time = int(get_time) - time_now  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.

    if middle_time <= 0:
        return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ.
    else:
        dt = str(timedelta(seconds=middle_time))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
        dt = dt.replace("days", "–¥–Ω–µ–π")  # –ó–∞–º–µ–Ω—è–µ—Ç "days" –Ω–∞ "–¥–Ω–µ–π".
        dt = dt.replace("day", "–¥–µ–Ω—å")  # –ó–∞–º–µ–Ω—è–µ—Ç "day" –Ω–∞ "–¥–µ–Ω—å".
        return dt  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞.


@dp.message(CommandStart())  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start.
async def cmd_start(message: types.Message):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start.
    if SQL_DB.get_id_status(message.from_user.id):
        await message.answer(f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {hbold(message.from_user.full_name)} !', reply_markup=bt.keyboard)
    else:
        await message.reply(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {hbold(message.from_user.full_name)} !\n'
                            f'\n'
                            f'{txt.greeting_message}', reply_markup=bt.keyboard)
        await SQL_DB.add_users(message.from_user.id, message.from_user.full_name, 0, 0, 10)


@dp.message(F.text.lower() == 'üîê –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ".
async def encrypt(message: types.Message, state: FSMContext):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
    await state.set_state(st.States.shifr)
    await message.answer(f'{txt.shifr_text}')
    await asyncio.sleep(random.randint(30, 30))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


async def shifr_message(message: Message, state: FSMContext):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
    if SQL_DB.get_sub_status(message.from_user.id) or str(message.from_user.id) in ADMIN:
        if message.text is not None and re.match(RESTR, message.text):
            text_input = await en.message_input(message.text.split('#')[0], int(message.text.split('#')[1]))
            await message.answer(text_input)
            await SQL_DB.add_data_shifr(message.from_user.id, message.text.split('#')[0], int(message.text.split('#')[1]), text_input)
            await asyncio.sleep(random.randint(600, 600))
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
            await state.clear()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ("–°–æ–æ–±—â–µ–Ω–∏–µ"#4, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)')
            await asyncio.sleep(random.randint(30, 30))
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
    elif SQL_DB.get_free_message(message.from_user.id):
        if message.text is not None and re.match(RESTR, message.text):
            text_input = await en.message_input(message.text.split('#')[0], int(message.text.split('#')[1]))
            await message.answer(text_input)
            await SQL_DB.delete_free_message(message.from_user.id)
            await SQL_DB.add_data_shifr(message.from_user.id, message.text.split('#')[0], int(message.text.split('#')[1]), text_input)
            await asyncio.sleep(random.randint(600, 600))
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
            await state.clear()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ("–°–æ–æ–±—â–µ–Ω–∏–µ"#4, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)')
            await asyncio.sleep(random.randint(30, 30))
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
    else:
        if not SQL_DB.get_sub_status(message.from_user.id):
            await message.answer('–£ –í–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –ø—Ä–æ—Å—å–±–∞ –æ–ø–ª–∞—Ç–∏—Ç—å')


@dp.message(F.text.lower() == 'üîì —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ".
async def decrypt(message: types.Message, state: FSMContext):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    await state.set_state(st.States.deshifr)
    await message.answer(f'{txt.deshifr_text}')
    await asyncio.sleep(random.randint(30, 30))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


async def deshifr_message(message: Message, state: FSMContext):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
    if SQL_DB.get_sub_status(message.from_user.id) or str(message.from_user.id) in ADMIN:
        if message.text is not None and re.match(RESTR, message.text):
            text_output = await de.message_output(message.text.split('#')[0], int(message.text.split('#')[1]))
            await message.answer(text_output)
            await SQL_DB.add_data_deshifr(message.from_user.id, message.text.split('#')[0], int(message.text.split('#')[1]), text_output)
            await asyncio.sleep(random.randint(600, 600))
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
            await state.clear()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ("–°–æ–æ–±—â–µ–Ω–∏–µ"#4, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)')
            await asyncio.sleep(random.randint(30, 30))
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
    elif SQL_DB.get_free_message(message.from_user.id):
        if message.text is not None and re.match(RESTR, message.text):
            text_output = await de.message_output(message.text.split('#')[0], int(message.text.split('#')[1]))
            await message.answer(text_output)
            await SQL_DB.delete_free_message(message.from_user.id)
            await SQL_DB.add_data_deshifr(message.from_user.id, message.text.split('#')[0], int(message.text.split('#')[1]), text_output)
            await asyncio.sleep(random.randint(600, 600))
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
            await state.clear()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ("–°–æ–æ–±—â–µ–Ω–∏–µ"#4, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)')
            await asyncio.sleep(random.randint(30, 30))
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
    else:
        if not SQL_DB.get_sub_status(message.from_user.id):
            await message.answer('–£ –í–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –ø—Ä–æ—Å—å–±–∞ –æ–ø–ª–∞—Ç–∏—Ç—å')


@dp.message(F.text.lower() == 'üí¨ –æ–±—â–∏–π —á–∞—Ç')  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–æ–±—â–∏–π —á–∞—Ç".
async def feedback(message: types.Message, state: FSMContext):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
    if str(message.from_user.id) in ADMIN:
        await state.set_state(st.States.feedback)
        tg_encript_group = "https://t.me/encript_chat"
        await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {hbold(message.from_user.full_name)} –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {tg_encript_group}")
        await asyncio.sleep(random.randint(30, 30))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await state.clear()
    elif SQL_DB.get_sub_status(message.from_user.id):
        await state.set_state(st.States.feedback)
        tg_encript_group = "https://t.me/encript_chat"
        await message.answer(f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏, —á—Ç–æ –±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É\n"
                             f" –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {tg_encript_group}")
        await asyncio.sleep(random.randint(30, 30))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await state.clear()  # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞.
    else:
        await message.answer('–ß–∞—Ç —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.')
        await asyncio.sleep(random.randint(30, 30))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await state.clear()


@dp.message(F.text.lower() == 'üíª –∫–æ–¥–æ–≤–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞')  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–∫–æ–¥–æ–≤–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞".
async def info_channal(message: types.Message, state: FSMContext):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ.
    if str(message.from_user.id) in ADMIN:
        await state.set_state(st.States.info_channal)
        tg_info_group = "https://t.me/Program_semanti"
        await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {hbold(message.from_user.full_name)} –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {tg_info_group}")
        await asyncio.sleep(random.randint(30, 30))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await state.clear()
    else:
        await state.set_state(st.States.info_channal)
        tg_info_group = "https://t.me/Program_semanti"
        await message.answer(f"–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ —Å–∞–º–æ–µ –∫—Ä—É—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ —Å—Å—ã–ª–∫–µ {tg_info_group}")
        await asyncio.sleep(random.randint(30, 30))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        await state.clear()


@dp.message(F.text.lower() == 'ü™™ –ø—Ä–æ—Ñ–∏–ª—å')  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–ø—Ä–æ—Ñ–∏–ª—å".
async def profile(message: types.Message):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    if str(message.from_user.id) in ADMIN:
        await message.answer(f"–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {hbold(message.from_user.full_name)}\n"
                             f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –±–µ—Å—Å—Ä–æ—á–Ω–æ")
    else:
        if SQL_DB.get_sub_status(message.from_user.id):
            user_nik = "–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: " + await SQL_DB.get_nik(message.from_user.id)
            user_sub_time = time_sub_day(SQL_DB.get_time_sub(message.from_user.id))
            user_sub = "\n–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –Ω–∞: " + str(user_sub_time)
            await bot.send_message(message.from_user.id, user_nik + user_sub)
            await asyncio.sleep(random.randint(30, 30))
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
        else:
            user_nik = "–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: " + await SQL_DB.get_nik(message.from_user.id)
            user_sub_time = "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            user_sub = "\n–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –Ω–∞: " + str(user_sub_time)
            user_freemessage = "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: " + await SQL_DB.get_free_count_messages(message.from_user.id)
            await bot.send_message(message.from_user.id, user_nik + user_sub + user_freemessage)
            await asyncio.sleep(random.randint(30, 30))
            await message.delete()
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


@dp.message(F.text.lower() == 'üìÑ –æ–ø–∏—Å–∞–Ω–∏–µ')  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º "–æ–ø–∏—Å–∞–Ω–∏–µ".
async def description(message: types.Message, state: FSMContext):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è.
    await state.set_state(st.States.description)
    await message.answer(f'{txt.description}')
    await asyncio.sleep(random.randint(180, 180))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
    await state.clear()


@dp.message(F.text.lower() == 'üí∞ –ø–æ–¥–ø–∏—Å–∫–∞')  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏.
async def buy_subscription(message: types.Message, state: FSMContext):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
    await state.set_state(st.States.buy_subscription)
    if PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π",
                           provider_token=PAYMENTS_TOKEN,
                           currency="rub",
                           is_flexible=False,
                           prices=[price],
                           start_parameter="one-month-subscription",
                           payload="test-invoice-payload")
    await asyncio.sleep(random.randint(300, 300))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)
    await state.clear()


@dp.pre_checkout_query(lambda query: True)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂.
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂.
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(F.successful_payment)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ.
async def successful_payment(message: types.Message):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
    if message.successful_payment.invoice_payload == "test-invoice-payload":
        time_sub = int(time.time()) + days_to_seconds(30)
        await SQL_DB.set_sub_time(message.from_user.id, time_sub)
        await bot.send_message(message.chat.id, '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞')
        await asyncio.sleep(random.randint(300, 300))
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


dp.message.register(shifr_message, st.States.shifr)
dp.message.register(deshifr_message, st.States.deshifr)
dp.message.register(feedback, st.States.feedback)
dp.message.register(description, st.States.description)
dp.message.register(info_channal, st.States.info_channal)
dp.message.register(buy_subscription, st.States.buy_subscription)


@dp.message()  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
async def handle_messages(message: types.Message):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    await message.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n'
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.')
    await asyncio.sleep(random.randint(30, 30))
    await message.delete()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id + 1)


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
